<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ipeak.dao.RoleEmployeeDao">
    <!-- RoleEmployee的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_RoleEmployee_Map" type="com.entity.RoleEmployee">
        <result column="role_id" property="roleId" />
        <result column="emp_id" property="empId" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:role_employee的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="role_employee_Column">
        role_employee.role_id as role_id
        ,role_employee.emp_id as emp_id
    </sql>

    <!--获得类名为:RoleEmployee对应的数据库表的数据总行数 -->
    <select id="getRoleEmployeeRowCount" parameterType="com.common.Assist" resultType="java.lang.Long">
        select count(*) from role_employee
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:RoleEmployee对应数据库中表的数据集合 -->
    <select id="selectRoleEmployee" parameterType="com.common.Assist"  resultMap="result_RoleEmployee_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="role_employee_Column" /> 
            </otherwise>
        </choose>
        from role_employee
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT null as primary_key FROM role_employee
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=role_employee.null
            </otherwise>
        </choose>
    </select> 

    <!-- 将RoleEmployee插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertRoleEmployee" parameterType="com.entity.RoleEmployee">
        insert into role_employee(role_id,emp_id) 
        values(#{roleId},#{empId})
    </insert>

    <!-- 将RoleEmployee中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyRoleEmployee" parameterType="com.entity.RoleEmployee">
        insert into role_employee
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="roleId != null">role_id,</if>
            <if test="empId != null">emp_id,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="roleId != null"> #{roleId},</if>
            <if test="empId != null"> #{empId},</if>
        </trim>
    </insert>

    <!-- 将RoleEmployee批量插入到对应数据库的表中-->
    <insert id="insertRoleEmployeeByBatch" parameterType="ArrayList">
        insert into role_employee(role_id,emp_id) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.roleId},#{item.empId})
        </foreach>
    </insert>

    <!-- 通过辅助工具Assist中的条件将RoleEmployee对应的数据库表的数据删除-->
    <delete id="deleteRoleEmployee" parameterType="com.common.Assist">
        delete from role_employee
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

</mapper>