<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ipeak.dao.ProductDao">
    <!-- Product的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Product_Map" type="com.entity.Product">
        <id column="product_id" property="productId" />
        <result column="gmt_create" property="gmtCreate" />
        <result column="product_type" property="productType" />
        <result column="product_describe" property="productDescribe" />
        <result column="gmt_modified" property="gmtModified" />
        <result column="product_name" property="productName" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:product的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="product_Column">
        product.product_id as product_id
        ,product.gmt_create as gmt_create
        ,product.product_type as product_type
        ,product.product_describe as product_describe
        ,product.gmt_modified as gmt_modified
        ,product.product_name as product_name
    </sql>

    <!--获得类名为:Product对应的数据库表的数据总行数 -->
    <select id="getProductRowCount" parameterType="com.common.Assist" resultType="java.lang.Long">
        select count(product_id) from product
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Product对应数据库中表的数据集合 -->
    <select id="selectProduct" parameterType="com.common.Assist"  resultMap="result_Product_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="product_Column" /> 
            </otherwise>
        </choose>
        from product
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT product_id as primary_key FROM product
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=product.product_id
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Product对象,以参数Product对象中不为空的属性作为条件进行查询-->
    <select id="selectProductByObj" parameterType="com.entity.Product" resultMap="result_Product_Map">
        select 
            <include refid="product_Column" /> 
        from product
        <where>
            <if test="productName != null "> and product.product_name = #{productName}</if>
            <if test="gmtModified != null "> and product.gmt_modified = #{gmtModified}</if>
            <if test="productDescribe != null "> and product.product_describe = #{productDescribe}</if>
            <if test="productType != null "> and product.product_type = #{productType}</if>
            <if test="gmtCreate != null "> and product.gmt_create = #{gmtCreate}</if>
            <if test="productId != null "> and product.product_id = #{productId}</if>
        </where>
    </select> 

    <!-- 通过Product的id获得对应数据库中表的数据对象-->
    <select id="selectProductById" parameterType="java.lang.Long" resultMap="result_Product_Map">
        select 
            <include refid="product_Column" /> 
        from product
        where product.product_id = #{id}
    </select> 

    <!-- 将Product插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertProduct" parameterType="com.entity.Product">
        insert into product(product_id,gmt_create,product_type,product_describe,gmt_modified,product_name) 
        values(#{productId},#{gmtCreate},#{productType},#{productDescribe},#{gmtModified},#{productName})
    </insert>

    <!-- 将Product中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyProduct" parameterType="com.entity.Product">
        insert into product
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="productId != null">product_id,</if>
            <if test="gmtCreate != null">gmt_create,</if>
            <if test="productType != null">product_type,</if>
            <if test="productDescribe != null">product_describe,</if>
            <if test="gmtModified != null">gmt_modified,</if>
            <if test="productName != null">product_name,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="productId != null"> #{productId},</if>
            <if test="gmtCreate != null"> #{gmtCreate},</if>
            <if test="productType != null"> #{productType},</if>
            <if test="productDescribe != null"> #{productDescribe},</if>
            <if test="gmtModified != null"> #{gmtModified},</if>
            <if test="productName != null"> #{productName},</if>
        </trim>
    </insert>

    <!-- 将Product批量插入到对应数据库的表中-->
    <insert id="insertProductByBatch" parameterType="ArrayList">
        insert into product(product_id,gmt_create,product_type,product_describe,gmt_modified,product_name) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.productId},#{item.gmtCreate},#{item.productType},#{item.productDescribe},#{item.gmtModified},#{item.productName})
        </foreach>
    </insert>

    <!-- 通过Product的id将数据库表中对应的数据删除-->
    <delete id="deleteProductById" parameterType="java.lang.Long">
        delete from product
        where product_id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Product对应的数据库表的数据删除-->
    <delete id="deleteProduct" parameterType="com.common.Assist">
        delete from product
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Product的id将Product的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateProductById" parameterType="com.entity.Product">
        update product set
            gmt_create=#{gmtCreate}
            ,product_type=#{productType}
            ,product_describe=#{productDescribe}
            ,gmt_modified=#{gmtModified}
            ,product_name=#{productName}
        where product_id=#{productId}
    </update>

    <!-- 通过Product的id将Product中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyProductById" parameterType="com.entity.Product">
        update product
        <set>
            <if test="gmtCreate != null">
                gmt_create=#{gmtCreate},
            </if>
            <if test="productType != null">
                product_type=#{productType},
            </if>
            <if test="productDescribe != null">
                product_describe=#{productDescribe},
            </if>
            <if test="gmtModified != null">
                gmt_modified=#{gmtModified},
            </if>
            <if test="productName != null">
                product_name=#{productName},
            </if>
        </set>
        where product_id=#{productId}
    </update>

    <!-- 通过辅助工具Assist中的条件将Product中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateProduct" parameterType="map">
        update product
        <set>
                product_id=#{enti.productId},
                gmt_create=#{enti.gmtCreate},
                product_type=#{enti.productType},
                product_describe=#{enti.productDescribe},
                gmt_modified=#{enti.gmtModified},
                product_name=#{enti.productName},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Product中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyProduct" parameterType="map">
        update product
        <set>
            <if test="enti.productId != null">
                product_id=#{enti.productId},
            </if>
            <if test="enti.gmtCreate != null">
                gmt_create=#{enti.gmtCreate},
            </if>
            <if test="enti.productType != null">
                product_type=#{enti.productType},
            </if>
            <if test="enti.productDescribe != null">
                product_describe=#{enti.productDescribe},
            </if>
            <if test="enti.gmtModified != null">
                gmt_modified=#{enti.gmtModified},
            </if>
            <if test="enti.productName != null">
                product_name=#{enti.productName},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>