<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ipeak.dao.EmployeeDao">
    <!-- Employee的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Employee_Map" type="com.entity.Employee">
        <id column="emp_id" property="empId" />
        <result column="gmt_create" property="gmtCreate" />
        <result column="emp_password" property="empPassword" />
        <result column="emp_moblie" property="empMoblie" />
        <result column="last_login" property="lastLogin" />
        <result column="emp_name" property="empName" />
        <result column="gmt_modified" property="gmtModified" />
        <result column="emp_email" property="empEmail" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:employee的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="employee_Column">
        employee.emp_id as emp_id
        ,employee.gmt_create as gmt_create
        ,employee.emp_password as emp_password
        ,employee.emp_moblie as emp_moblie
        ,employee.last_login as last_login
        ,employee.emp_name as emp_name
        ,employee.gmt_modified as gmt_modified
        ,employee.emp_email as emp_email
    </sql>

    <!--获得类名为:Employee对应的数据库表的数据总行数 -->
    <select id="getEmployeeRowCount" parameterType="com.common.Assist" resultType="java.lang.Long">
        select count(emp_id) from employee
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Employee对应数据库中表的数据集合 -->
    <select id="selectEmployee" parameterType="com.common.Assist"  resultMap="result_Employee_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="employee_Column" /> 
            </otherwise>
        </choose>
        from employee
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT emp_id as primary_key FROM employee
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=employee.emp_id
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Employee对象,以参数Employee对象中不为空的属性作为条件进行查询-->
    <select id="selectEmployeeByObj" parameterType="com.entity.Employee" resultMap="result_Employee_Map">
        select 
            <include refid="employee_Column" /> 
        from employee
        <where>
            <if test="empEmail != null "> and employee.emp_email = #{empEmail}</if>
            <if test="gmtModified != null "> and employee.gmt_modified = #{gmtModified}</if>
            <if test="empName != null "> and employee.emp_name = #{empName}</if>
            <if test="lastLogin != null "> and employee.last_login = #{lastLogin}</if>
            <if test="empMoblie != null "> and employee.emp_moblie = #{empMoblie}</if>
            <if test="empPassword != null "> and employee.emp_password = #{empPassword}</if>
            <if test="gmtCreate != null "> and employee.gmt_create = #{gmtCreate}</if>
            <if test="empId != null "> and employee.emp_id = #{empId}</if>
        </where>
    </select> 

    <!-- 通过Employee的id获得对应数据库中表的数据对象-->
    <select id="selectEmployeeById" parameterType="java.lang.Long" resultMap="result_Employee_Map">
        select 
            <include refid="employee_Column" /> 
        from employee
        where employee.emp_id = #{id}
    </select> 

    <!-- 将Employee插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertEmployee" parameterType="com.entity.Employee">
        insert into employee(emp_id,gmt_create,emp_password,emp_moblie,last_login,emp_name,gmt_modified,emp_email) 
        values(#{empId},#{gmtCreate},#{empPassword},#{empMoblie},#{lastLogin},#{empName},#{gmtModified},#{empEmail})
    </insert>

    <!-- 将Employee中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyEmployee" parameterType="com.entity.Employee">
        insert into employee
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="empId != null">emp_id,</if>
            <if test="gmtCreate != null">gmt_create,</if>
            <if test="empPassword != null">emp_password,</if>
            <if test="empMoblie != null">emp_moblie,</if>
            <if test="lastLogin != null">last_login,</if>
            <if test="empName != null">emp_name,</if>
            <if test="gmtModified != null">gmt_modified,</if>
            <if test="empEmail != null">emp_email,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="empId != null"> #{empId},</if>
            <if test="gmtCreate != null"> #{gmtCreate},</if>
            <if test="empPassword != null"> #{empPassword},</if>
            <if test="empMoblie != null"> #{empMoblie},</if>
            <if test="lastLogin != null"> #{lastLogin},</if>
            <if test="empName != null"> #{empName},</if>
            <if test="gmtModified != null"> #{gmtModified},</if>
            <if test="empEmail != null"> #{empEmail},</if>
        </trim>
    </insert>

    <!-- 将Employee批量插入到对应数据库的表中-->
    <insert id="insertEmployeeByBatch" parameterType="ArrayList">
        insert into employee(emp_id,gmt_create,emp_password,emp_moblie,last_login,emp_name,gmt_modified,emp_email) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.empId},#{item.gmtCreate},#{item.empPassword},#{item.empMoblie},#{item.lastLogin},#{item.empName},#{item.gmtModified},#{item.empEmail})
        </foreach>
    </insert>

    <!-- 通过Employee的id将数据库表中对应的数据删除-->
    <delete id="deleteEmployeeById" parameterType="java.lang.Long">
        delete from employee
        where emp_id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Employee对应的数据库表的数据删除-->
    <delete id="deleteEmployee" parameterType="com.common.Assist">
        delete from employee
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Employee的id将Employee的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateEmployeeById" parameterType="com.entity.Employee">
        update employee set
            gmt_create=#{gmtCreate}
            ,emp_password=#{empPassword}
            ,emp_moblie=#{empMoblie}
            ,last_login=#{lastLogin}
            ,emp_name=#{empName}
            ,gmt_modified=#{gmtModified}
            ,emp_email=#{empEmail}
        where emp_id=#{empId}
    </update>

    <!-- 通过Employee的id将Employee中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyEmployeeById" parameterType="com.entity.Employee">
        update employee
        <set>
            <if test="gmtCreate != null">
                gmt_create=#{gmtCreate},
            </if>
            <if test="empPassword != null">
                emp_password=#{empPassword},
            </if>
            <if test="empMoblie != null">
                emp_moblie=#{empMoblie},
            </if>
            <if test="lastLogin != null">
                last_login=#{lastLogin},
            </if>
            <if test="empName != null">
                emp_name=#{empName},
            </if>
            <if test="gmtModified != null">
                gmt_modified=#{gmtModified},
            </if>
            <if test="empEmail != null">
                emp_email=#{empEmail},
            </if>
        </set>
        where emp_id=#{empId}
    </update>

    <!-- 通过辅助工具Assist中的条件将Employee中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateEmployee" parameterType="map">
        update employee
        <set>
                emp_id=#{enti.empId},
                gmt_create=#{enti.gmtCreate},
                emp_password=#{enti.empPassword},
                emp_moblie=#{enti.empMoblie},
                last_login=#{enti.lastLogin},
                emp_name=#{enti.empName},
                gmt_modified=#{enti.gmtModified},
                emp_email=#{enti.empEmail},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Employee中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyEmployee" parameterType="map">
        update employee
        <set>
            <if test="enti.empId != null">
                emp_id=#{enti.empId},
            </if>
            <if test="enti.gmtCreate != null">
                gmt_create=#{enti.gmtCreate},
            </if>
            <if test="enti.empPassword != null">
                emp_password=#{enti.empPassword},
            </if>
            <if test="enti.empMoblie != null">
                emp_moblie=#{enti.empMoblie},
            </if>
            <if test="enti.lastLogin != null">
                last_login=#{enti.lastLogin},
            </if>
            <if test="enti.empName != null">
                emp_name=#{enti.empName},
            </if>
            <if test="enti.gmtModified != null">
                gmt_modified=#{enti.gmtModified},
            </if>
            <if test="enti.empEmail != null">
                emp_email=#{enti.empEmail},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>